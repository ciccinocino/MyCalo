# Use this open statement to create an OpenGL view:
/vis/open OGL 600x600-0+0
#/vis/open OGLIQt 600x600-0+0

# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors

# Draw geometry:
/vis/drawVolume
# Specify view angle:
/vis/viewer/set/viewpointThetaPhi 140. 140.
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories rich
# Color-code particles trajectories
/vis/modeling/trajectories/create/drawByParticleID
/vis/modeling/trajectories/drawByParticleID-0/set gamma yellow
/vis/modeling/trajectories/drawByParticleID-0/set e- yellow
/vis/modeling/trajectories/drawByParticleID-0/set e+ yellow
/vis/modeling/trajectories/drawByParticleID-0/set pi+ green
/vis/modeling/trajectories/drawByParticleID-0/set pi0 green
/vis/modeling/trajectories/drawByParticleID-0/set pi- green
/vis/modeling/trajectories/drawByParticleID-0/set proton red
/vis/modeling/trajectories/drawByParticleID-0/set neutron blue
/vis/modeling/trajectories/drawByParticleID-0/set kaon+ grey
/vis/modeling/trajectories/drawByParticleID-0/set kaon- grey

# Draw hits at end of event:
/vis/scene/add/hits

# To draw only gammas and/or neutrons:
/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma 
/vis/filtering/trajectories/particleFilter-0/add neutron

# To invert the above, drawing all particles except gammas and/or neutrons,
# keep the above two lines but also add:
/vis/filtering/trajectories/particleFilter-0/invert true

# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
