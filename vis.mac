# Use this open statement to create an OpenGL view:
/vis/open OGL 600x600-0+0
#/vis/open OGLIQt 600x600-0+0

# Use this open statement to create an OpenInventor view:
#/vis/open OIX

# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE

# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile

# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE

# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors

# Draw geometry:
/vis/drawVolume
# Specify view angle:
/vis/viewer/set/viewpointThetaPhi 140. 140.
# Specify zoom value:
#/vis/viewer/zoom 2.
# Specify style (surface, wireframe, auxiliary edges,...)
#/vis/viewer/set/style wireframe
#/vis/viewer/set/auxiliaryEdge true
#/vis/viewer/set/lineSegmentsPerCircle 100
# Draw coordinate axes:
#/vis/scene/add/axes 0 0 0 0.1 m
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories rich
/vis/modeling/trajectories/create/drawByParticleID
/vis/modeling/trajectories/drawByParticleID-0/set gamma yellow
/vis/modeling/trajectories/drawByParticleID-0/set e- yellow
/vis/modeling/trajectories/drawByParticleID-0/set e+ yellow
/vis/modeling/trajectories/drawByParticleID-0/set pi+ green
/vis/modeling/trajectories/drawByParticleID-0/set pi0 green
/vis/modeling/trajectories/drawByParticleID-0/set pi- green
/vis/modeling/trajectories/drawByParticleID-0/set proton red
/vis/modeling/trajectories/drawByParticleID-0/set neutron blue
/vis/modeling/trajectories/drawByParticleID-0/set kaon+ grey
/vis/modeling/trajectories/drawByParticleID-0/set kaon- grey

#/vis/modeling/trajectories/create/drawByCharge
#/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
#/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 1
#(if too many tracks cause core dump => /tracking/storeTrajectory 0)

# Draw hits at end of event:
/vis/scene/add/hits
#/control/execute run1.mac

# To draw only gammas and/or neutrons:
/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma 
/vis/filtering/trajectories/particleFilter-0/add neutron

# To invert the above, drawing all particles except gammas and/or neutrons,
# keep the above two lines but also add:
/vis/filtering/trajectories/particleFilter-0/invert true

# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
#/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/default/setDrawStepPts true
# To select or override default colours (note: e+ is blue by default):
#/vis/modeling/trajectories/list
#/vis/modeling/trajectories/drawByParticleID-0/set e+ yellow

# To superimpose all of the events from a given run:
#/vis/scene/endOfEventAction accumulate

# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings

# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush
